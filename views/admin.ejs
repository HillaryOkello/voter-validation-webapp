<%- include('partials/header', {title: 'Admin - Election Voting System'}) %>

<div class="header">
    <h1>Election Admin Panel</h1>
    <p class="lead">Manage voter register and view election statistics</p>
    <div class="d-flex justify-content-end">
        <a href="/logout" class="btn btn-outline-secondary btn-sm">Logout</a>
    </div>
</div>

<div class="row">
    <div class="col-md-5">
        <div class="form-container">
            <h3>Upload Voter Register</h3>
            <p>Upload an Excel (XLSX/XLS) or CSV file containing the voter register. The file must include a column named "MMC NO." or "Membership Number".</p>

            <form id="uploadForm" enctype="multipart/form-data">
                <div class="mb-3">
                    <label for="registerFile" class="form-label">Voter Register File</label>
                    <input class="form-control" type="file" id="registerFile" name="register" accept=".csv,.xlsx,.xls" required>
                    <div class="form-text">Supported formats: Excel (.xlsx, .xls) and CSV (.csv)</div>
                </div>
                <button type="submit" class="btn btn-primary">Upload Register</button>
                <div id="uploadAlert" class="alert mt-3 hidden"></div>
            </form>
        </div>

        <div class="form-container mt-4">
            <h3>Export Votes</h3>
            <p>Download all votes as an Excel file for verification or analysis.</p>

            <div class="d-grid gap-2">
                <a href="/api/export-votes" class="btn btn-success" download>Download Votes Excel</a>
            </div>
        </div>

        <div class="form-container mt-4">
            <h3>Change Admin Password</h3>
            <form id="passwordForm">
                <div class="mb-3">
                    <label for="currentPassword" class="form-label">Current Password</label>
                    <input type="password" class="form-control" id="currentPassword" required>
                </div>
                <div class="mb-3">
                    <label for="newPassword" class="form-label">New Password</label>
                    <input type="password" class="form-control" id="newPassword" required>
                </div>
                <div class="mb-3">
                    <label for="confirmPassword" class="form-label">Confirm New Password</label>
                    <input type="password" class="form-control" id="confirmPassword" required>
                </div>
                <button type="submit" class="btn btn-warning">Change Password</button>
                <div id="passwordAlert" class="alert mt-3 hidden"></div>
            </form>
        </div>

        <div class="form-container mt-4">
            <h3>System Management</h3>
            <p class="text-danger">Warning: These actions cannot be undone. Use with caution.</p>
            
            <div class="row">
                <div class="col-md-4 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Reset Votes</h5>
                            <p class="card-text">Clear all votes from the system. This will delete all voting data permanently.</p>
                            <button id="resetVotesBtn" class="btn btn-danger">Reset All Votes</button>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-4 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Reset Voter Register</h5>
                            <p class="card-text">Delete the uploaded voter register file. You'll need to upload a new one.</p>
                            <button id="resetRegisterBtn" class="btn btn-danger">Reset Voter Register</button>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-4 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Reset Admin Accounts</h5>
                            <p class="card-text">Reset admin accounts to default. You will be logged out.</p>
                            <button id="resetAdminBtn" class="btn btn-danger">Reset Admin Accounts</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <div id="resetAlert" class="alert mt-3 hidden"></div>
        </div>
    </div>

    <div class="col-md-7">
        <div class="form-container">
            <h3>Voting Statistics</h3>
            <div id="statsLoading" class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Loading statistics...</p>
            </div>

            <div id="statsContent" class="hidden">
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Participation</h5>
                        <div class="row">
                            <div class="col-md-4 text-center">
                                <h2 id="totalVoters">0</h2>
                                <p>Total Voters</p>
                            </div>
                            <div class="col-md-4 text-center">
                                <h2 id="totalVotes">0</h2>
                                <p>Votes Cast</p>
                            </div>
                            <div class="col-md-4 text-center">
                                <h2 id="votingPercentage">0%</h2>
                                <p>Participation</p>
                            </div>
                        </div>
                        <!-- Participation Chart -->
                        <div class="mt-3" style="width: 35%; margin: 0 auto;">
                            <canvas id="participationChart" height="90"></canvas>
                        </div>
                    </div>
                </div>

                <div id="resultsContainer">
                    <!-- Results will be dynamically added here -->
                </div>
            </div>

            <div id="statsError" class="alert alert-danger mt-3 hidden">
                Failed to load statistics. Please try again later.
            </div>

            <button id="refreshStats" class="btn btn-secondary mt-3">Refresh Statistics</button>
        </div>
    </div>
</div>

<div class="form-container mt-4">
    <h3>Sample Voter Register Format</h3>
    <p>Your Excel or CSV file should follow this format:</p>

    <div class="table-responsive">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>M/SHIP NO.</th>
                    <th>TEL NO.</th>
                    <th>NAME</th>
                    <th>Additional Fields...</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>1464</td>
                    <td>0735 720 877</td>
                    <td>OUMA KAWERE</td>
                    <td></td>
                </tr>
                <tr>
                    <td>0316</td>
                    <td>0722 302 679</td>
                    <td>JOSEPHINE PAMELA ADHIAMBO</td>
                    <td></td>
                </tr>
            </tbody>
        </table>
    </div>

    <div class="alert alert-info">
        <strong>Note:</strong> The system recognizes the "M/SHIP NO." column as the membership number and "NAME" column for member names. Make sure these columns are properly labeled in your file.
    </div>
</div>

<!-- Include Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const uploadForm = document.getElementById('uploadForm');
        const uploadAlert = document.getElementById('uploadAlert');
        const statsLoading = document.getElementById('statsLoading');
        const statsContent = document.getElementById('statsContent');
        const statsError = document.getElementById('statsError');
        const refreshStats = document.getElementById('refreshStats');
        const resultsContainer = document.getElementById('resultsContainer');
        const passwordForm = document.getElementById('passwordForm');
        const passwordAlert = document.getElementById('passwordAlert');
        const resetVotesBtn = document.getElementById('resetVotesBtn');
        const resetAdminBtn = document.getElementById('resetAdminBtn');
        const resetRegisterBtn = document.getElementById('resetRegisterBtn');
        const resetAlert = document.getElementById('resetAlert');

        // Chart objects
        let participationChart = null;
        let resultCharts = {};

        // Load initial statistics
        loadStats();

        uploadForm.addEventListener('submit', function(e) {
            e.preventDefault();

            const formData = new FormData(uploadForm);
            const fileInput = document.getElementById('registerFile');

            if (!fileInput.files[0]) {
                showUploadAlert('Please select a file to upload.', 'danger');
                return;
            }

            uploadAlert.classList.add('hidden');

            fetch('/api/upload-register', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showUploadAlert(`${data.message} (${data.count} voters)`, 'success');
                    // Reset the file input after successful upload
                    uploadForm.reset();
                    // Reload statistics after successful upload
                    loadStats();
                } else {
                    showUploadAlert(data.message, 'danger');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showUploadAlert('An error occurred during upload. Please try again.', 'danger');
            });
        });

        passwordForm.addEventListener('submit', function(e) {
            e.preventDefault();

            const currentPassword = document.getElementById('currentPassword').value;
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;

            if (newPassword !== confirmPassword) {
                showPasswordAlert('New passwords do not match.', 'danger');
                return;
            }

            passwordAlert.classList.add('hidden');

            fetch('/api/change-password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ currentPassword, newPassword })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showPasswordAlert(data.message, 'success');
                    passwordForm.reset();
                } else {
                    showPasswordAlert(data.message, 'danger');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showPasswordAlert('An error occurred while changing the password. Please try again.', 'danger');
            });
        });

        refreshStats.addEventListener('click', loadStats);

        resetVotesBtn.addEventListener('click', function() {
            if (confirm('Are you sure you want to reset all votes? This action cannot be undone.')) {
                fetch('/api/reset-votes', {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showResetAlert('Votes have been reset.', 'success');
                        loadStats();
                    } else {
                        showResetAlert(data.message, 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showResetAlert('An error occurred while resetting votes. Please try again.', 'danger');
                });
            }
        });

        resetAdminBtn.addEventListener('click', function() {
            if (confirm('Are you sure you want to reset admin accounts? You will be logged out.')) {
                fetch('/api/reset-admin', {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showResetAlert('Admin accounts have been reset. You will be logged out.', 'success');
                        setTimeout(function() {
                            window.location.href = '/logout';
                        }, 2000);
                    } else {
                        showResetAlert(data.message, 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showResetAlert('An error occurred while resetting admin accounts. Please try again.', 'danger');
                });
            }
        });

        resetRegisterBtn.addEventListener('click', function() {
            if (confirm('Are you sure you want to reset the voter register? You will need to upload a new one.')) {
                fetch('/api/reset-register', {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showResetAlert('Voter register has been reset.', 'success');
                        // Reload statistics after successful reset
                        loadStats();
                    } else {
                        showResetAlert(data.message, 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showResetAlert('An error occurred while resetting the voter register. Please try again.', 'danger');
                });
            }
        });

        function showUploadAlert(message, type) {
            uploadAlert.textContent = message;
            uploadAlert.className = `alert alert-${type} mt-3`;
        }

        function showPasswordAlert(message, type) {
            passwordAlert.textContent = message;
            passwordAlert.className = `alert alert-${type} mt-3`;
        }

        function showResetAlert(message, type) {
            resetAlert.textContent = message;
            resetAlert.className = `alert alert-${type} mt-3`;
        }

        function loadStats() {
            statsLoading.classList.remove('hidden');
            statsContent.classList.add('hidden');
            statsError.classList.add('hidden');

            fetch('/api/stats')
            .then(response => response.json())
            .then(data => {
                if (data.success === false) {
                    throw new Error(data.message);
                }

                document.getElementById('totalVoters').textContent = data.totalVoters;
                document.getElementById('totalVotes').textContent = data.totalVotes;
                document.getElementById('votingPercentage').textContent = `${data.votingPercentage}%`;

                // Create participation chart
                createParticipationChart(data.totalVoters, data.totalVotes);

                // Display vote counts
                displayResults(data.voteCounts);

                statsLoading.classList.add('hidden');
                statsContent.classList.remove('hidden');
            })
            .catch(error => {
                console.error('Error:', error);
                statsLoading.classList.add('hidden');
                statsError.classList.remove('hidden');
            });
        }

        function createParticipationChart(totalVoters, totalVotes) {
            const ctx = document.getElementById('participationChart').getContext('2d');

            // Destroy existing chart if it exists
            if (participationChart) {
                participationChart.destroy();
            }

            const notVoted = Math.max(0, totalVoters - totalVotes);

            participationChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: ['Votes Cast', 'Not Voted'],
                    datasets: [{
                        data: [totalVotes, notVoted],
                        backgroundColor: [
                            'rgba(54, 162, 235, 0.7)',
                            'rgba(211, 211, 211, 0.7)'
                        ],
                        borderColor: [
                            'rgba(54, 162, 235, 1)',
                            'rgba(211, 211, 211, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                boxWidth: 12,
                                padding: 10
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.raw || 0;
                                    const total = context.dataset.data.reduce((acc, val) => acc + val, 0);
                                    const percentage = Math.round((value / total) * 100);
                                    return `${label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
        }

        function displayResults(voteCounts) {
            const resultsContainer = document.getElementById('resultsContainer');
            resultsContainer.innerHTML = '';

            // Active positions - must be kept in sync with server.js
            const activePositions = [
                'deputyPeoplesWarden',
                'chairmanFinance'
            ];

            // Initialize card for each active position
            activePositions.forEach(position => {
                const card = document.createElement('div');
                card.className = 'card mb-3';

                const cardBody = document.createElement('div');
                cardBody.className = 'card-body';

                const cardTitle = document.createElement('h5');
                cardTitle.className = 'card-title';
                cardTitle.textContent = formatQuestionTitle(position);

                cardBody.appendChild(cardTitle);

                // Add chart container
                const chartContainer = document.createElement('div');
                chartContainer.className = 'mb-3';
                chartContainer.style = 'width: 60%; margin: 0 auto;';
                const chartCanvas = document.createElement('canvas');
                chartCanvas.id = `chart-${position}`;
                chartCanvas.height = 120;
                chartContainer.appendChild(chartCanvas);
                cardBody.appendChild(chartContainer);

                // Create an empty table as placeholder
                const table = document.createElement('table');
                table.className = 'table table-sm';
                
                const thead = document.createElement('thead');
                const headerRow = document.createElement('tr');
                
                ['Candidate', 'Votes', 'Percentage'].forEach(headerText => {
                    const th = document.createElement('th');
                    th.textContent = headerText;
                    headerRow.appendChild(th);
                });
                
                thead.appendChild(headerRow);
                table.appendChild(thead);
                
                // Create table body
                const tbody = document.createElement('tbody');
                tbody.id = `tbody-${position}`;
                table.appendChild(tbody);
                
                cardBody.appendChild(table);
                card.appendChild(cardBody);
                resultsContainer.appendChild(card);
                
                // Initialize with empty data if no votes yet
                if (!voteCounts[position] || Object.keys(voteCounts[position]).length === 0) {
                    // For positions with no votes yet, we'll show an empty chart
                    // We need to get the candidates from the ballot
                    getCandidatesForPosition(position).then(candidates => {
                        if (candidates.length > 0) {
                            // We have candidate names, create a chart with zero votes
                            const labels = candidates;
                            const data = Array(candidates.length).fill(0);
                            const colors = generateChartColors(candidates.length);
                            
                            // Create the chart
                            createResultChart(
                                chartCanvas.id,
                                labels,
                                data,
                                colors,
                                formatQuestionTitle(position)
                            );
                            
                            // Populate the table with zero votes
                            const tbody = document.getElementById(`tbody-${position}`);
                            candidates.forEach(candidate => {
                                const row = document.createElement('tr');
                                
                                const nameCell = document.createElement('td');
                                nameCell.textContent = candidate;
                                row.appendChild(nameCell);
                                
                                const votesCell = document.createElement('td');
                                votesCell.textContent = '0';
                                row.appendChild(votesCell);
                                
                                const percentCell = document.createElement('td');
                                percentCell.textContent = '0%';
                                row.appendChild(percentCell);
                                
                                tbody.appendChild(row);
                            });
                        } else {
                            // No candidates found, show "No votes yet" message
                            const tbody = document.getElementById(`tbody-${position}`);
                            const row = document.createElement('tr');
                            const messageCell = document.createElement('td');
                            messageCell.colSpan = 3;
                            messageCell.className = 'text-center';
                            messageCell.textContent = 'No candidates or votes yet for this position';
                            row.appendChild(messageCell);
                            tbody.appendChild(row);
                        }
                    });
                }
            });

            // If there are no vote counts at all, we're done (charts are already created)
            if (Object.keys(voteCounts).length === 0) {
                return;
            }

            // Now populate data for positions that have votes
            for (const [question, answers] of Object.entries(voteCounts)) {
                // Skip positions that aren't in the activePositions list
                if (!activePositions.includes(question)) {
                    console.log(`Skipping stats for removed position: ${question}`);
                    continue;
                }

                // Get the table body for this position
                const tbody = document.getElementById(`tbody-${question}`);
                if (!tbody) continue;
                
                // Clear any existing content (from the zero-votes placeholder)
                tbody.innerHTML = '';

                const total = Object.values(answers).reduce((sum, count) => sum + count, 0);
                
                // Sort answers by vote count (descending)
                const sortedAnswers = Object.entries(answers).sort((a, b) => b[1] - a[1]);
                
                // Chart data
                const chartLabels = [];
                const chartData = [];
                
                // Populate table with real vote data
                sortedAnswers.forEach(([candidate, votes]) => {
                    chartLabels.push(candidate);
                    chartData.push(votes);
                    
                    const percentage = Math.round((votes / total) * 100) || 0;
                    
                    const row = document.createElement('tr');
                    
                    const nameCell = document.createElement('td');
                    nameCell.textContent = candidate;
                    row.appendChild(nameCell);
                    
                    const votesCell = document.createElement('td');
                    votesCell.textContent = votes;
                    row.appendChild(votesCell);
                    
                    const percentCell = document.createElement('td');
                    percentCell.textContent = `${percentage}%`;
                    row.appendChild(percentCell);
                    
                    tbody.appendChild(row);
                });
                
                // Create chart with the real data
                const chartColors = generateChartColors(chartLabels.length);
                
                // Create or update the chart
                createResultChart(
                    `chart-${question}`,
                    chartLabels,
                    chartData,
                    chartColors,
                    formatQuestionTitle(question)
                );
            }
        }

        // Function to get candidates for a position from the vote form
        async function getCandidatesForPosition(position) {
            try {
                // Fetch vote.ejs to extract candidates
                const response = await fetch('/vote');
                const html = await response.text();
                
                // Create a temporary DOM element to parse the HTML
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                
                // Find all radio buttons for this position
                const radios = Array.from(doc.querySelectorAll(`input[type="radio"][name="${position}"]`));
                
                // Extract candidate names from the values
                return radios.map(radio => radio.value);
            } catch (error) {
                console.error('Error fetching candidates:', error);
                return [];
            }
        }

        function createResultChart(canvasId, labels, data, colors, title) {
            const ctx = document.getElementById(canvasId).getContext('2d');

            // Destroy existing chart if it exists
            if (resultCharts[canvasId]) {
                resultCharts[canvasId].destroy();
            }

            resultCharts[canvasId] = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Votes',
                        data: data,
                        backgroundColor: colors,
                        borderColor: colors.map(color => color.replace('0.7', '1')),
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    layout: {
                        padding: {
                            top: 0,
                            right: 0,
                            bottom: 0,
                            left: 0
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        },
                        title: {
                            display: true,
                            text: title,
                            font: {
                                size: 14
                            },
                            padding: {
                                top: 5,
                                bottom: 5
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const value = context.raw || 0;
                                    const total = context.dataset.data.reduce((acc, val) => acc + val, 0);
                                    const percentage = Math.round((value / total) * 100);
                                    return `Votes: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            }
                        }
                    }
                }
            });
        }

        function generateChartColors(count) {
            const baseColors = [
                'rgba(54, 162, 235, 0.7)',  // blue
                'rgba(255, 99, 132, 0.7)',   // red
                'rgba(75, 192, 192, 0.7)',   // green
                'rgba(255, 206, 86, 0.7)',   // yellow
                'rgba(153, 102, 255, 0.7)',  // purple
                'rgba(255, 159, 64, 0.7)',   // orange
                'rgba(199, 199, 199, 0.7)'   // gray
            ];

            // If we have more options than colors, cycle through the colors
            const colors = [];
            for (let i = 0; i < count; i++) {
                colors.push(baseColors[i % baseColors.length]);
            }

            return colors;
        }

        function formatQuestionTitle(key) {
            // Convert camelCase to Title Case with spaces
            return key
                .replace(/([A-Z])/g, ' $1')
                .replace(/^./, str => str.toUpperCase());
        }
    });
</script>

<%- include('partials/footer') %>
